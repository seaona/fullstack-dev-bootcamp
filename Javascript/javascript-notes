JAVASCRIPT

5 PRIMITIVE DATATYPES

- NUMBER: it doesn't distinguish if it's fractional or negative
4
9.3
-10


- STRING: are always inside quotes (they can be single or double quotes)
"hello world"
"42"

*if we want to write double quotes inside the string we can use the ESCAPE CHARACTER \:

	"she said \"goodbye"\to me"

	"To see a backslash: \\"

Properties:
"hello".length  -->counts the characters, including spaces
"hello"[0]    	--> returns "h"
"hello"[4]		-->returns "o"



- BOOLEAN: no quotes
true
false


- NULL: it's explicitly empty/nothing
null


- UNDEFINED: if a variable is not initiated with a value it returns
undefined





PRIMITIVES EXERCISE:
1
a
5%3=2


VARIABLES
A variable is a container that has a name on it, and inside stores data.
They can store all 5 types of primities
JS Variables should be chamelcase

var variableName=yourValue;

JS IS DINAYMIC TYPING--> a same variable can change from one type to another. i.e.: first string, then number
	var a="hello";
	a=3


COMMENTS IN JS: 
//this won't run


BUILT-IN METHODS
*alert("hello there");  
it pops up a message

*prompt("what is your name");
forgetting input from the user

we can save the input in a variable:

var userName=prompt("what's your name?");


*console.log("sss");

*clear()  it's a method for cleaning the console

CONTROL FLOW
if statements
conditionals
loops

BOOLEAN LOGIC
writing statments that evaluate True or False


Comparison Operators
>
>=
<
<=
==
!=
===    	(equal value and type) it's much safer and much more specific
!==	(not equal value or type)

== uses type coercion --> it transform types trying to be the same format, and then performs the comparision


Example:

var y= null;
y == undefined //true
y === undefined ///false


A few interesting Cases
true == "1"  		//true
0 == false		//false
null == undefined 	//false
NaN == NaN		//false    (Not a Number)


LOGICAL OPERATORS
assuming x=5 and y=9

&& 	AND	(x<10 && x!==5)		FALSE

||	OR	(y>9 || x === 5)	TRUE

!	NOT	!(x === y)		TRUE


TRUTHY AND FALSY VALUES
Values that aren't actually true or false, are still inherently "Truthy" or "falsey" when evaluated in a boolean context.

i.e.
!"Hello"	FALSE --> so it's truthy

or !!"Hello"	TRUE --> it's truthy

FALSY VALUES
- false
- 0
- ""
- null
- undefined
- NaN

the rest are all TRUTHY 

CONDITIONALS KEY WORDS

if

else if

else



typeof xxx -> ens indica el tipus de variable

Number(variable) --> transforma la variable en un numero


DRY CODE-> Dont Repeat Yourself



WHILE LOOPS


count++;

count+=2;  --> compta de 2 en 2



