JAVASCRIPT

5 PRIMITIVE DATATYPES

- NUMBER: it doesn't distinguish if it's fractional or negative
4
9.3
-10


- STRING: are always inside quotes (they can be single or double quotes)
"hello world"
"42"

*if we want to write double quotes inside the string we can use the ESCAPE CHARACTER \:

	"she said \"goodbye"\to me"

	"To see a backslash: \\"

Properties:
"hello".length  -->counts the characters, including spaces
"hello"[0]    	--> returns "h"
"hello"[4]		-->returns "o"



- BOOLEAN: no quotes
true
false


- NULL: it's explicitly empty/nothing
null


- UNDEFINED: if a variable is not initiated with a value it returns
undefined





PRIMITIVES EXERCISE:
1
a
5%3=2


VARIABLES
A variable is a container that has a name on it, and inside stores data.
They can store all 5 types of primities
JS Variables should be chamelcase

var variableName=yourValue;

JS IS DINAYMIC TYPING--> a same variable can change from one type to another. i.e.: first string, then number
	var a="hello";
	a=3


COMMENTS IN JS: 
//this won't run


BUILT-IN METHODS
*alert("hello there");  
it pops up a message

*prompt("what is your name");
forgetting input from the user

we can save the input in a variable:

var userName=prompt("what's your name?");


*console.log("sss");

*clear()  it's a method for cleaning the console

CONTROL FLOW
if statements
conditionals
loops

BOOLEAN LOGIC
writing statments that evaluate True or False


Comparison Operators
>
>=
<
<=
==
!=
===    	(equal value and type) it's much safer and much more specific
!==	(not equal value or type)

== uses type coercion --> it transform types trying to be the same format, and then performs the comparision


Example:

var y= null;
y == undefined //true
y === undefined ///false


A few interesting Cases
true == "1"  		//true
0 == false		//false
null == undefined 	//false
NaN == NaN		//false    (Not a Number)


LOGICAL OPERATORS
assuming x=5 and y=9

&& 	AND	(x<10 && x!==5)		FALSE

||	OR	(y>9 || x === 5)	TRUE

!	NOT	!(x === y)		TRUE


TRUTHY AND FALSY VALUES
Values that aren't actually true or false, are still inherently "Truthy" or "falsey" when evaluated in a boolean context.

i.e.
!"Hello"	FALSE --> so it's truthy

or !!"Hello"	TRUE --> it's truthy

FALSY VALUES
- false
- 0
- ""
- null
- undefined
- NaN

the rest are all TRUTHY 

CONDITIONALS KEY WORDS

if

else if

else



typeof xxx -> ens indica el tipus de variable

Number(variable) --> transforma la variable en un numero


DRY CODE-> Dont Repeat Yourself



WHILE LOOPS


count++;

count+=2;  --> compta de 2 en 2

as


INDEXOF("targetWord") --> aquesta funcio ens diu si un string conte un aparaula. si la contÃ© ens diu el numero de posiciod'inici, si no ens retorna -1
answer.indexOf("yes")


FOR LOOPS
for(init; condition; step){
xxxx
}


for(var count=0; countz6; count++{
console.log(count)
}


* the variable count, only exisits inside the loop
in comparision to while loops, where we have to initilized before and outside the loop



FUNCTIONS: let us wrap bits of code up into REUSABLE packages. They are one of the building blocks of JS

1. Declare a function:

	function doSomething() {
		console.log("hello");
	}


2. Call it:
	doSomething();

*if you call it without the parenteses (doSomething) it will give you back the function, but IT WON'T RUN THE CODE


FUNCTION DECLARATIONS
	- ARGUMENTS: functions that take inputs

function square(num){
console.log(num*num);
}


function area (length, width){
console.log(length*width);
}

area(9,2);


THE RETURN KEYWORD
input>> function>> output

- we can only write 1 RETURN
- it stops the execution of a function: as soon as it returns something, the function stops


function square(x){
return x*x;
}

var result=square(104);




FUNCTION DECLARATION
function capitalize(str) {
	return xxx;
}


FUNCTION EXPRESSIONS
var capitalize = function(str){
	return xxx;
}

https://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/

SCOPE
scope is the context in that the code is executed

i.e. function doMath(){
	var x=40;
}

x is inside the function, so its scope is inside. Outside it doesnt exist. It's undefined

- when we define something outside of the function (in the global scope), we still have access from the inside of the function

- you can change variables from the global scope inside a function and it will affect the global scope

- if we DECLARE the same variable name inside the function, it will only exisit inside, as a new one



HIGHER ORDER FUNCTIONS: pass functions to other functions

function sing(){
	console.log("twinkle twinkle...");
	console.log("how i wonder..");
}

setInterval(sing, interval);   --> this is one example of a HIGHER ORDER FUNCTION

setInterval(function(){..}, interval)  --> ho podem fer amb funcions anonimes, sense declarar nom



